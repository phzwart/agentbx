name: Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Check if version changed
        id: check-version
        run: |
          # Get current version from pyproject.toml
          current_version=$(poetry version | awk '{ print $2 }')
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

          # Check if this version was already tagged
          if git tag -l "v$current_version" | grep -q "v$current_version"; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug version info
        run: |
          echo "=== Version Debug Info ==="
          echo "Poetry version: $(poetry version)"
          echo "pyproject.toml version: $(grep '^version =' pyproject.toml)"
          echo "_version.py content:"
          cat src/agentbx/_version.py
          echo "Python import test:"
          python -c "from agentbx import __version__; print(f'Imported version: {__version__}')"

      - name: Sync version across files
        if: steps.check-version.outputs.version_exists == 'false'
        run: |
          python scripts/sync_version.py ${{ steps.check-version.outputs.current_version }}
          echo "=== After sync ==="
          echo "pyproject.toml version: $(grep '^version =' pyproject.toml)"
          cat src/agentbx/_version.py

      - name: Build package
        run: |
          poetry build --ansi
          echo "=== Built packages ==="
          ls -la dist/
          echo "=== Wheel metadata ==="
          python -c "import zipfile; z = zipfile.ZipFile('dist/agentbx-${{ steps.check-version.outputs.current_version }}-py3-none-any.whl'); print(z.read('agentbx-${{ steps.check-version.outputs.current_version }}.dist-info/METADATA').decode()[:300])"

      - name: Publish package on PyPI
        if: steps.check-version.outputs.version_exists == 'false'
        uses: pypa/gh-action-pypi-publish@v1.8.6
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create Git tag
        if: steps.check-version.outputs.version_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/agentbx/_version.py pyproject.toml
          git commit -m "Sync version to ${{ steps.check-version.outputs.current_version }}" || true
          git tag -a v${{ steps.check-version.outputs.current_version }} -m "Release v${{ steps.check-version.outputs.current_version }}"
          git push origin v${{ steps.check-version.outputs.current_version }}

      - name: Publish the release notes
        if: steps.check-version.outputs.version_exists == 'false'
        uses: release-drafter/release-drafter@v5.23.0
        with:
          publish: true
          tag: v${{ steps.check-version.outputs.current_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
